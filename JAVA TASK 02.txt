Simulate a basic stock trading environment.]

import java.util.*;

public class StockTradingSimulator {
    static Scanner scanner = new Scanner(System.in);
    static double balance = 10000.0;
    static Map<String, Integer> portfolio = new HashMap<>();
    static Map<String, Double> stockPrices = new HashMap<>();

    public static void main(String[] args) {
        initializeStocks();

        int choice;
        do {
            displayMenu();
            choice = scanner.nextInt();
            switch (choice) {
                case 1 -> showBalance();
                case 2 -> showStockPrices();
                case 3 -> buyStock();
                case 4 -> sellStock();
                case 5 -> showPortfolio();
                case 6 -> System.out.println("Exiting... Thank you for trading!");
                default -> System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 6);
    }

    static void initializeStocks() {
        stockPrices.put("AAPL", 150.0);
        stockPrices.put("GOOG", 2800.0);
        stockPrices.put("AMZN", 3400.0);
        stockPrices.put("TSLA", 750.0);
    }

    static void displayMenu() {
        System.out.println("\n--- Stock Trading Simulator ---");
        System.out.println("1. View Balance");
        System.out.println("2. View Stock Prices");
        System.out.println("3. Buy Stocks");
        System.out.println("4. Sell Stocks");
        System.out.println("5. View Portfolio");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    static void showBalance() {
        System.out.printf("Current balance: $%.2f\n", balance);
    }

    static void showStockPrices() {
        System.out.println("\n--- Stock Prices ---");
        for (String stock : stockPrices.keySet()) {
            double newPrice = stockPrices.get(stock) * (0.95 + Math.random() * 0.1); // small fluctuation
            stockPrices.put(stock, newPrice);
            System.out.printf("%s: $%.2f\n", stock, newPrice);
        }
    }

    static void buyStock() {
        System.out.print("Enter stock symbol to buy (e.g., AAPL): ");
        String symbol = scanner.next().toUpperCase();
        if (!stockPrices.containsKey(symbol)) {
            System.out.println("Stock not found.");
            return;
        }
        System.out.print("Enter quantity: ");
        int quantity = scanner.nextInt();
        double cost = stockPrices.get(symbol) * quantity;
        if (cost > balance) {
            System.out.println("Not enough balance.");
            return;
        }
        balance -= cost;
        portfolio.put(symbol, portfolio.getOrDefault(symbol, 0) + quantity);
        System.out.println("Stock purchased.");
    }

    static void sellStock() {
        System.out.print("Enter stock symbol to sell: ");
        String symbol = scanner.next().toUpperCase();
        if (!portfolio.containsKey(symbol) || portfolio.get(symbol) == 0) {
            System.out.println("You don‚Äôt own this stock.");
            return;
        }
        System.out.print("Enter quantity to sell: ");
        int quantity = scanner.nextInt();
        if (quantity > portfolio.get(symbol)) {
            System.out.println("You don‚Äôt have enough shares.");
            return;
        }
        double revenue = stockPrices.get(symbol) * quantity;
        balance += revenue;
        portfolio.put(symbol, portfolio.get(symbol) - quantity);
        System.out.println("Stock sold.");
    }

    static void showPortfolio() {
        System.out.println("\n--- Portfolio ---");
        if (portfolio.isEmpty()) {
            System.out.println("No stocks in portfolio.");
        } else {
            for (String stock : portfolio.keySet()) {
                int qty = portfolio.get(stock);
                if (qty > 0) {
                    System.out.printf("%s: %d shares\n", stock, qty);
                }
            }
        }
    }
}


add features for market data display and buy/sell operations

import java.util.*;

public class StockTradingSimulator {
    static Scanner scanner = new Scanner(System.in);
    static double balance = 10000.0;
    static Map<String, Integer> portfolio = new HashMap<>();
    static Map<String, Double> stockPrices = new HashMap<>();
    static Map<String, Double> lastPrices = new HashMap<>();

    public static void main(String[] args) {
        initializeStocks();

        int choice;
        do {
            displayMenu();
            choice = scanner.nextInt();
            switch (choice) {
                case 1 -> showBalance();
                case 2 -> updateAndDisplayMarketData();
                case 3 -> buyStock();
                case 4 -> sellStock();
                case 5 -> showPortfolio();
                case 6 -> System.out.println("Exiting... Thank you for trading!");
                default -> System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 6);
    }

    static void initializeStocks() {
        stockPrices.put("AAPL", 150.0);
        stockPrices.put("GOOG", 2800.0);
        stockPrices.put("AMZN", 3400.0);
        stockPrices.put("TSLA", 750.0);
        lastPrices.putAll(stockPrices);
    }

    static void displayMenu() {
        System.out.println("\n--- Stock Trading Simulator ---");
        System.out.println("1. View Balance");
        System.out.println("2. View Market Data");
        System.out.println("3. Buy Stocks");
        System.out.println("4. Sell Stocks");
        System.out.println("5. View Portfolio");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    static void showBalance() {
        System.out.printf("üíµ Current balance: $%.2f\n", balance);
    }

    static void updateAndDisplayMarketData() {
        System.out.println("\nüìä --- Market Data ---");
        Random rand = new Random();
        for (String stock : stockPrices.keySet()) {
            double lastPrice = stockPrices.get(stock);
            double changePercent = (rand.nextDouble() * 4 - 2); // -2% to +2%
            double newPrice = lastPrice * (1 + changePercent / 100);
            lastPrices.put(stock, stockPrices.get(stock));
            stockPrices.put(stock, newPrice);

            String arrow = changePercent >= 0 ? "‚ñ≤" : "‚ñº";
            System.out.printf("%-5s: $%.2f (%s%.2f%%)\n", stock, newPrice, arrow, Math.abs(changePercent));
        }
    }

    static void buyStock() {
        System.out.print("Enter stock symbol to buy: ");
        String symbol = scanner.next().toUpperCase();
        if (!stockPrices.containsKey(symbol)) {
            System.out.println("‚ùå Stock not found.");
            return;
        }

        System.out.printf("Current price of %s: $%.2f\n", symbol, stockPrices.get(symbol));
        System.out.print("Enter quantity: ");
        int quantity = scanner.nextInt();

        double cost = stockPrices.get(symbol) * quantity;
        if (cost > balance) {
            System.out.println("‚ùå Insufficient balance.");
            return;
        }

        balance -= cost;
        portfolio.put(symbol, portfolio.getOrDefault(symbol, 0) + quantity);
        System.out.printf("‚úÖ Bought %d shares of %s for $%.2f. Remaining balance: $%.2f\n", quantity, symbol, cost, balance);
    }

    static void sellStock() {
        System.out.print("Enter stock symbol to sell: ");
        String symbol = scanner.next().toUpperCase();
        if (!portfolio.containsKey(symbol) || portfolio.get(symbol) <= 0) {
            System.out.println("‚ùå You do not own this stock.");
            return;
        }

        System.out.print("Enter quantity to sell: ");
        int quantity = scanner.nextInt();
        int owned = portfolio.get(symbol);

        if (quantity > owned) {
            System.out.printf("‚ùå You only have %d shares of %s.\n", owned, symbol);
            return;
        }

        double revenue = stockPrices.get(symbol) * quantity;
        balance += revenue;
        portfolio.put(symbol, owned - quantity);
        System.out.printf("‚úÖ Sold %d shares of %s for $%.2f. New balance: $%.2f\n", quantity, symbol, revenue, balance);
    }

    static void showPortfolio() {
        System.out.println("\nüìÅ --- Your Portfolio ---");
        boolean empty = true;
        for (String stock : portfolio.keySet()) {
            int qty = portfolio.get(stock);
            if (qty > 0) {
                double currentPrice = stockPrices.get(stock);
                System.out.printf("%s: %d shares (Value: $%.2f)\n", stock, qty, qty * currentPrice);
                empty = false;
            }
        }
        if (empty) {
            System.out.println("You don‚Äôt own any stocks.");
        }
    }
}


allow users to track portfolio performance over time

import java.util.*;

public class StockTradingSimulator {
    static Scanner scanner = new Scanner(System.in);
    static double balance = 10000.0;
    static Map<String, Integer> portfolio = new HashMap<>();
    static Map<String, Double> stockPrices = new HashMap<>();
    static Map<String, Double> lastPrices = new HashMap<>();
    static List<Double> portfolioHistory = new ArrayList<>();

    public static void main(String[] args) {
        initializeStocks();
        recordPortfolioValue(); // Initial snapshot

        int choice;
        do {
            displayMenu();
            choice = scanner.nextInt();
            switch (choice) {
                case 1 -> showBalance();
                case 2 -> updateAndDisplayMarketData();
                case 3 -> buyStock();
                case 4 -> sellStock();
                case 5 -> showPortfolio();
                case 6 -> showPerformanceHistory();
                case 7 -> System.out.println("Exiting... Thank you for trading!");
                default -> System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 7);
    }

    static void initializeStocks() {
        stockPrices.put("AAPL", 150.0);
        stockPrices.put("GOOG", 2800.0);
        stockPrices.put("AMZN", 3400.0);
        stockPrices.put("TSLA", 750.0);
        lastPrices.putAll(stockPrices);
    }

    static void displayMenu() {
        System.out.println("\n--- Stock Trading Simulator ---");
        System.out.println("1. View Balance");
        System.out.println("2. View Market Data");
        System.out.println("3. Buy Stocks");
        System.out.println("4. Sell Stocks");
        System.out.println("5. View Portfolio");
        System.out.println("6. View Portfolio Performance");
        System.out.println("7. Exit");
        System.out.print("Enter your choice: ");
    }

    static void showBalance() {
        System.out.printf("üíµ Current balance: $%.2f\n", balance);
    }

    static void updateAndDisplayMarketData() {
        System.out.println("\nüìä --- Market Data ---");
        Random rand = new Random();
        for (String stock : stockPrices.keySet()) {
            double lastPrice = stockPrices.get(stock);
            double changePercent = (rand.nextDouble() * 4 - 2); // -2% to +2%
            double newPrice = lastPrice * (1 + changePercent / 100);
            lastPrices.put(stock, stockPrices.get(stock));
            stockPrices.put(stock, newPrice);

            String arrow = changePercent >= 0 ? "‚ñ≤" : "‚ñº";
            System.out.printf("%-5s: $%.2f (%s%.2f%%)\n", stock, newPrice, arrow, Math.abs(changePercent));
        }

        // Record portfolio value after market update
        recordPortfolioValue();
    }

    static void buyStock() {
        System.out.print("Enter stock symbol to buy: ");
        String symbol = scanner.next().toUpperCase();
        if (!stockPrices.containsKey(symbol)) {
            System.out.println("‚ùå Stock not found.");
            return;
        }

        System.out.printf("Current price of %s: $%.2f\n", symbol, stockPrices.get(symbol));
        System.out.print("Enter quantity: ");
        int quantity = scanner.nextInt();

        double cost = stockPrices.get(symbol) * quantity;
        if (cost > balance) {
            System.out.println("‚ùå Insufficient balance.");
            return;
        }

        balance -= cost;
        portfolio.put(symbol, portfolio.getOrDefault(symbol, 0) + quantity);
        System.out.printf("‚úÖ Bought %d shares of %s for $%.2f. Remaining balance: $%.2f\n", quantity, symbol, cost, balance);
    }

    static void sellStock() {
        System.out.print("Enter stock symbol to sell: ");
        String symbol = scanner.next().toUpperCase();
        if (!portfolio.containsKey(symbol) || portfolio.get(symbol) <= 0) {
            System.out.println("‚ùå You do not own this stock.");
            return;
        }

        System.out.print("Enter quantity to sell: ");
        int quantity = scanner.nextInt();
        int owned = portfolio.get(symbol);

        if (quantity > owned) {
            System.out.printf("‚ùå You only have %d shares of %s.\n", owned, symbol);
            return;
        }

        double revenue = stockPrices.get(symbol) * quantity;
        balance += revenue;
        portfolio.put(symbol, owned - quantity);
        System.out.printf("‚úÖ Sold %d shares of %s for $%.2f. New balance: $%.2f\n", quantity, symbol, revenue, balance);
    }

    static void showPortfolio() {
        System.out.println("\nüìÅ --- Your Portfolio ---");
        boolean empty = true;
        for (String stock : portfolio.keySet()) {
            int qty = portfolio.get(stock);
            if (qty > 0) {
                double currentPrice = stockPrices.get(stock);
                System.out.printf("%s: %d shares (Value: $%.2f)\n", stock, qty, qty * currentPrice);


use object oriented object to manage stocks users and transactions

public class Stock {
    private final String symbol;
    private double price;

    public Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }

    public String getSymbol() {
        return symbol;
    }

    public double getPrice() {
        return price;
    }

    public void updatePrice() {
        double changePercent = (Math.random() * 4 - 2); // -2% to +2%
        price *= (1 + changePercent / 100);
    }

    public String getFormattedPrice() {
        return String.format("%.2f", price);
    }
}


optionally include file i/o or  database to persist portfolio data

import java.io.*;
import java.util.*;

public class User {
    private double balance;
    private final Map<String, Integer> portfolio = new HashMap<>();

    public User(double initialBalance) {
        this.balance = initialBalance;
    }

    public double getBalance() {
        return balance;
    }

    public void buyStock(Stock stock, int quantity) {
        double totalCost = stock.getPrice() * quantity;
        if (totalCost > balance) {
            System.out.println("‚ùå Not enough balance.");
            return;
        }
        balance -= totalCost;
        portfolio.put(stock.getSymbol(), portfolio.getOrDefault(stock.getSymbol(), 0) + quantity);
        System.out.printf("‚úÖ Bought %d shares of %s for $%.2f\n", quantity, stock.getSymbol(), totalCost);
    }

    public void sellStock(Stock stock, int quantity) {
        String symbol = stock.getSymbol();
        int owned = portfolio.getOrDefault(symbol, 0);
        if (quantity > owned) {
            System.out.printf("‚ùå You only own %d shares of %s\n", owned, symbol);
            return;
        }
        double totalValue = stock.getPrice() * quantity;
        balance += totalValue;
        portfolio.put(symbol, owned - quantity);
        System.out.printf("‚úÖ Sold %d shares of %s for $%.2f\n", quantity, symbol, totalValue);
    }

    public void viewPortfolio(Map<String, Stock> market) {
        System.out.println("\nüìÅ --- Portfolio ---");
        if (portfolio.isEmpty()) {
            System.out.println("You don‚Äôt own any stocks.");
            return;
        }

        for (Map.Entry<String, Integer> entry : portfolio.entrySet()) {
            String symbol = entry.getKey();
            int quantity = entry.getValue();
            double value = market.get(symbol).getPrice() * quantity;
            System.out.printf("%s: %d shares (Value: $%.2f)\n", symbol, quantity, value);
        }
        System.out.printf("üíµ Cash Balance: $%.2f\n", balance);
    }

    public double getTotalValue(Map<String, Stock> market) {
        double total = balance;
        for (String symbol : portfolio.keySet()) {
            total += market.get(symbol).getPrice() * portfolio.get(symbol);
        }
        return total;
    }

    // üîπ Save to file
    public void saveToFile(String filename) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {
            writer.println(balance);
            for (Map.Entry<String, Integer> entry : portfolio.entrySet()) {
                writer.printf("%s:%d\n", entry.getKey(), entry.getValue());
            }
            System.out.println("‚úÖ Portfolio saved.");
        } catch (IOException e) {
            System.out.println("‚ùå Error saving portfolio: " + e.getMessage());
        }
    }

    // üîπ Load from file
    public static User loadFromFile(String filename) {
        File file = new File(filename);
        if (!file.exists()) {
            System.out.println("üìÑ No saved portfolio found. Starting fresh.");
            return new User(10000);
        }

        try (Scanner scanner = new Scanner(file)) {
            double balance = Double.parseDouble(scanner.nextLine());
            User user = new User(balance);
            while (scanner.hasNextLine()) {
                String[] parts = scanner.nextLine().split(":");
                if (parts.length == 2) {
                    user.portfolio.put(parts[0], Integer.parseInt(parts[1]));
                }
            }
            System.out.println("‚úÖ Portfolio loaded.");
            return user;
        } catch (Exception e) {
            System.out.println("‚ùå Failed to load portfolio: " + e.getMessage());
            return new User(10
